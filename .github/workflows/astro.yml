# Sample workflow for building and deploying an Astro site to GitHub Pages
#
# To get started with Astro see: https://docs.astro.build/en/getting-started/
#
name: Deploy Astro site to Server

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "." # default value when not using subfolders
  # BUILD_PATH: subfolder

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup pnpm
        # You may pin to the exact commit or the version.
        # uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d
        uses: pnpm/action-setup@v3.0.0
        with:
          version: 8.15.4
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Install dependencies
        run: |
          pnpm i
        working-directory: ${{ env.BUILD_PATH }}
      - name: Build with Astro
        run: |
          pnpm build
        working-directory: ${{ env.BUILD_PATH }}
      - name: FTP Mirror
        # You may pin to the exact commit or the version.
        # uses: modern-dev/ftp-mirror@700ec6b399f45cbd58572085856c6fe2114c8342
        uses: modern-dev/ftp-mirror@v2
        with:
          # FTP Server.
          server: ${{secrets.SERVER_ADDRESS}}
          # FTP User.
          user: ${{secrets.SERVER_USERNAME}}
          # FTP Password.
          password: ${{secrets.SERVER_PASSWORD}}
          # Local directory.
          local_dir: ${{ env.BUILD_PATH }}/dist
          # Remote directory.
          remote_dir: /
          # Delete all the files inside of the remote directory.
          delete: true
          # Exclude matching files.
          # exclude: # optional, default is 
          # Exclude matching files
          # exclude_glob: # optional, default is 
          # Times that the lftp will be executed if an error occurred.
          # max_retries: # optional, default is 10
          # Do not create symbolic links.
          # no_symlinks: # optional, default is true
          # FTP - Allow SSL encryption.
          # ftp_ssl_allow: true
          # FTP - FEAT: Determining what extended features the FTP server supports.
          # ftp_use_feat: # optional, default is false
          # FTP - Delay in seconds between NOOP commands when downloading tail of a file.
          # ftp_nop_interval: # optional, default is 2
          # NET - Maximum number of operation without success. 0 unlimited. 1 no retries.
          # net_max_retries: # optional, default is 1
          # NET - Ignore hard errors. When reply 5xx errors or there is too many users.
          # net_persist_retries: # optional, default is 5
          # NET - Sets the network protocol timeout.
          # net_timeout: # optional, default is 15s
          # DNS - 0 no limit trying to lookup an address otherwise try only this number of times.
          # dns_max_retries: # optional, default is 8
          # DNS - Time for DNS queries. Set to "never" to disable.
          # dns_fatal_timeout: # optional, default is 10s
                
                      
